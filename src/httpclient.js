// Generated by CoffeeScript 1.10.0
(function() {
  var URL, all_cookies, global_cookies, handle_resp_body, http, http_get, http_post, http_request, https, jsons, querystring,
    slice = [].slice;

  https = require("https");

  http = require('http');

  querystring = require('querystring');

  URL = require('url');

  jsons = JSON.stringify;

  all_cookies = [];

  global_cookies = function(cookie) {
    if (cookie) {
      all_cookies = cookie;
    }
    return all_cookies;
  };

  http_request = function(options, params, callback) {
    var append, aurl, body, client, data, query, req;
    aurl = URL.parse(options.url);
    options.host = aurl.host;
    options.path = aurl.path;
    options.headers || (options.headers = {});
    client = aurl.protocol === 'https:' ? https : http;
    body = '';
    if (params && options.method === 'POST') {
      data = querystring.stringify(params);
      options.headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';
      options.headers['Content-Length'] = Buffer.byteLength(data);
    }
    if (params && options.method === 'GET') {
      query = querystring.stringify(params);
      append = aurl.query ? '&' : '?';
      options.path += append + query;
    }
    options.headers['Cookie'] = all_cookies;
    options.headers['Referer'] = 'http://d.web2.qq.com/proxy.html?v=20110331002&callback=1&id=3';
    req = client.request(options, function(resp) {
      if (options.debug) {
        console.log("response: " + resp.statusCode);
        console.log("cookie: " + resp.headers['set-cookie']);
      }
      resp.on('data', function(chunk) {
        return body += chunk;
      });
      return resp.on('end', function() {
        return handle_resp_body(body, options, callback);
      });
    });
    req.on("error", function(e) {
      return callback(null, e);
    });
    if (params && options.method === 'POST') {
      req.write(data);
    }
    return req.end();
  };

  handle_resp_body = function(body, options, callback) {
    var err, error, error1, ret;
    err = null;
    try {
      ret = JSON.parse(body);
    } catch (error1) {
      error = error1;
      console.log("解析出错", options.url, body);
      console.log(error);
      err = error;
      ret = null;
    }
    return callback(ret, err);
  };

  http_get = function() {
    var args, callback, options, params, ref, url;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    url = args[0], params = args[1], callback = args[2];
    if (!callback) {
      ref = [null, params], params = ref[0], callback = ref[1];
    }
    options = {
      method: 'GET',
      url: url
    };
    return http_request(options, params, callback);
  };

  http_post = function(options, body, callback) {
    options.method = 'POST';
    return http_request(options, body, callback);
  };

  module.exports = {
    global_cookies: global_cookies,
    request: http_request,
    get: http_get,
    post: http_post
  };

}).call(this);
